# A sample Ruby program with basic HTTP calls to Fedora API. Sort of like cURL for Fedora. 
# References: 
#    Fedora 4 REST API https://wiki.duraspace.org/display/FF/RESTful+HTTP+API
#    nethttp cheat sheet http://www.rubyinside.com/nethttp-cheat-sheet-2940.html
require "net/http"
require "uri"

class FedoraApi

  def initialize(root_url = "http://localhost:8080/rest")
    @root_url = root_url
  end


  def get_node(object_url, format = "application/rdf+xml")
    uri = URI.parse(object_url)
    request = Net::HTTP::Get.new(uri)
    request["Accept"] = format # application/rdf+xml or application/ld+json or text/plain
    response = Net::HTTP.start(uri.hostname, uri.port) {|http|
      http.request(request)
    }
  end


  def create_datastream(object_url, text_content)
    # TODO: create proper HTTP request for multi-part binary data
    uri = URI.parse("#{object_url}")
    url = "#{uri.path}/fcr:content"
    http = Net::HTTP.new(uri.hostname, uri.port)
    puts "HTTP PUT: #{url}"
    response = http.send_request("PUT", url, text_content)
  end


  def create_object(object_url)
    if object_url == nil
      # The new node's ID will be autogenerated and be available in the 
      # response (as a URL) in the location header and in the body of 
      # the response. Notice that we use HTTP POST for this.
      url = @root_url + "?mixin=fedora:object" 
      uri = URI.parse(url)
      puts "HTTP POST: #{url}"
      request = Net::HTTP::Post.new(uri)
      response = Net::HTTP.start(uri.hostname, uri.port) {|http|
        http.request(request)
      }
    else
      # TODO: Accept a variable set of properties
      create_object_with_properties(object_url)
    end
  end


  def create_object_with_properties(object_url)
    uri = URI.parse("#{object_url}")
    puts "HTTP PUT: #{object_url}"
    response = Net::HTTP.start(uri.hostname, uri.port) {|http|
      request = Net::HTTP::Put.new(uri.path)
      # this does not work
      # request["Content-Type"] = "text/plain"
      # request.body = 'hello'

      # this works
      # request["Content-Type"] = "text/turtle"
      # request.body = 'PREFIX dc: <http://purl.org/dc/elements/1.1/>' + "\r\n" + '<> dc:title "some-resource-title" .'

      # this works 
      title = "Sample object created at #{Time.now.to_s}"
      request["Content-Type"] = "application/rdf+xml"
      request.body = '<?xml version="1.0" encoding="UTF-8"?>' + "\r\n"
      request.body += '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">' + "\r\n"
      request.body += '<rdf:Description rdf:about="">' + "\r\n"
      request.body += '<title xmlns="http://purl.org/dc/elements/1.1/" rdf:datatype="http://www.w3.org/2001/XMLSchema#string">' + title + '</title>' + "\r\n"
      request.body += '</rdf:Description>' + "\r\n"
      request.body += '</rdf:RDF>' + "\r\n"
      http.request(request)
    }      
  end


  def fixity(object_url, format = "application/rdf+xml")
    uri = URI.parse("#{object_url}/fcr:fixity")
    request = Net::HTTP::Get.new(uri)
    request["Accept"] = format # application/rdf+xml or application/ld+json or text/plain
    response = Net::HTTP.start(uri.hostname, uri.port) {|http|
      http.request(request)
    }
  end


  def test(object_url)
  end

end


def show_syntax
  puts "Syntax:"
  puts "    furl action [options]"
  puts ""
  puts "To retrieve a node"
  puts "    furl get http://full/path/to/object"
  puts ""
  puts "To create an object"
  puts "    furl createobj [http://full/path/to/new/object]"
  puts ""
  puts "To create a datastream"
  puts "    furl createds http://full/path/to/new/datastream text_content"
  puts ""
  puts "To check fixity"
  puts "    furl fixity http://full/path/to/object"
  puts ""
end


def print_response(response, include_body = true)
  puts "* Status: #{response.code}"
  puts "* Headers"
  headers = response.to_hash
  headers.each do |k,v| 
    puts "#{k} = #{v}"
  end
  if include_body
    puts "* Body"
    puts response.body
  end
end


action = ARGV[0]
response = nil
api = FedoraApi.new

if action == "get"
  object_url = ARGV[1]
  response = api.get_node(object_url) if object_url != nil
elsif action == "createds"
  object_url = ARGV[1]
  content = ARGV[2]
  if content != nil
    if content[0] == '@'
      # TODO 
      # we've received a file name, read its content
      # content = File.read(content)
    end
    response = api.create_datastream(object_url, content)
  end
elsif action == "createobj"
  object_url = ARGV[1]
  response = api.create_object(object_url)
elsif action == "fixity"
  object_url = ARGV[1]
  response = api.fixity(object_url) if object_url != nil
elsif action == "test"
  object_url = ARGV[1]
  response = api.test(object_url)
end

if response == nil
  show_syntax
else 
  print_response response
end

